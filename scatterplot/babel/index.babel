// Establish constants for chart formating
const margin = {top: 20, right: 30, bottom: 30, left: 40},
      width = 750 - margin.right - margin.left,
      height = 500 - margin.top - margin.bottom

// Scales, axes, and the time formatter for parsing dates
let xScale = d3.scale.linear().range([0, width])
let yScale = d3.scale.linear().range([0, height])

let timeFormat = d3.time.format("%H:%M")
let formatMinutes = function(d) {
  let t = new Date(2016, 0, 1, 0, d)
  t.setSeconds(t.getSeconds() + d);
  return timeFormat(t);
};

let xAxis = d3.svg.axis()
  .scale(xScale)
  .orient("bottom")
  .tickFormat(formatMinutes);

let yAxis = d3.svg.axis()
  .scale(yScale)
  .orient('left')

let chart = d3.select('.chart')

let graph = chart.append('svg')
    .attr('height', height + margin.top + margin.bottom)
    .attr('width', width + margin.left + margin.right)
    .attr('class', 'graph')
  .append('g')
    .attr('transform', `translate(${margin.left}, ${margin.top})`)

let tip = d3.tip()
  .attr('class', 'd3-tip')
  .direction(d => {
    let direction = 'n'
    if (d.Place < 4) {direction = 'e'}
    if (d.Place > 25) {direction = 's'}
    return direction
  })
  .offset(d => {
    let offset = [-5, 0]
    if (d.Place < 4) {offset = [0, 5]}
    if (d.Place > 25) {offset = [5, 0]}
    return offset
  })
  .html(d => {
    let name = d.Name
    let nationality = d.Nationality
    let year = d.Year
    let time = d.Time
    let doping = d.Doping
    return `
      <div>
        <p>${name}: ${nationality}</p>
        <p>Year: ${year}, Time: ${time}</p>
        <br/>
        <p>${doping}</p>
      </div>
    `
  })

graph.call(tip)

d3.json('https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json', (err, data) => {
  if (err) console.warn(err)
  
  let times = data.map(d => d.Seconds)
  let fastestTime = d3.min(times)
  let slowestTime = d3.max(times)
  let minSeparation = slowestTime - fastestTime
  
  data = data.map(obj => {
    obj.behind = obj.Seconds - fastestTime
    return obj
  })
  
  xScale.domain([0, minSeparation + 50])
  yScale.domain([data.length, 0])
  
  let dot = graph.selectAll('.dot')
    .data(data).enter()
  .append('circle')
    .attr('class', d => d.Doping ? 'dot doping' : 'dot')
    .attr('cy', d => yScale(d.Place))
    .attr('cx', d => xScale(d.behind))
    .attr('r', 4)
    .on('mouseover', tip.show)
    .on('mouseleave', tip.hide)
  
  let label = graph.selectAll('.label')
    .data(data).enter()
  .append('text')
    .attr('class', 'label')
    .attr('x', d => xScale(d.behind) + 10)
    .attr('y', d => yScale(d.Place) + 5)
    .text(d => d.Name)
  
  let legend = graph.append('g')
    .attr('class', 'legend')
  
  legend.append('circle')
    .attr('class', 'dot doping')
    .attr('cx', 25)
    .attr('cy', 25)
    .attr('r', 4)
  
  legend.append('text')
    .attr('x', 35)
    .attr('y', 31)
    .attr('class', 'legend-text')
    .text('With doping allegations')
  
  legend.append('circle')
      .attr('class', 'dot')
      .attr('cx', 25)
      .attr('cy', 50)
      .attr('r', 4)
  
  legend.append('text')
    .attr('x', 35)
    .attr('y', 56)
    .attr('class', 'legend-text')
    .text('Without doping allegations')
  
  graph.append('g')
    .attr('class', 'x axis')
    .attr('transform', `translate(0, ${height})`)
    .call(xAxis)
    .append('text')
    .attr('y', 30)
    .attr('x', width/2)
    .style("text-anchor", "middle")
    .text('Minutes behind fastest time')
  
  graph.append('g')
    .attr('class', 'y axis')
    .call(yAxis)
    .append('text')
    .attr('x', height/2 * -1)
    .attr('y', -30)
    .attr("transform", "rotate(-90)")
    .text('Rank')

})